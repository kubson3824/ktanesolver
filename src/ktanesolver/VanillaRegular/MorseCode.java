/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ktanesolver.VanillaRegular;

import java.util.Arrays;

/**
 *
 * @author Komp
 */
public class MorseCode extends javax.swing.JFrame {

    String[] splitCode, splitResult;
    String result="", freq;
    public MorseCode() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfCode = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        bAccept = new javax.swing.JButton();
        lResult = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Input the code below");

        bAccept.setText("OK");
        bAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAcceptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfCode)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lResult)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bAccept)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bAccept)
                    .addComponent(lResult))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAcceptActionPerformed
        result="";
        splitCode=tfCode.getText().split(" ");
        splitResult = new String[splitCode.length];
        for(int i=0;i<splitCode.length;i++){
            splitResult[i]=getLetter(splitCode[i]);
            result=result.concat(splitResult[i]);
        }
        freq=getFrequency(result);     
        lResult.setText("Frequency: "+freq);
    }//GEN-LAST:event_bAcceptActionPerformed
    private String getLetter(String s){
        String res = "";
        switch(s){
            case ".-":{
                res="a";
                return res;
            }       
            case "-...":{
                res="b";
                return res;
            }       
            case "-.-.":{
                res="c";
                return res;
            }       
            case "-..":{
                res="d";
                return res;
            }       
            case ".":{
                res="e";
                return res;
            }       
            case "..-.":{
                res="f";
                return res;
            }       
            case "--.":{
                res="g";
                return res;
            }       
            case "....":{
                res="h";
                return res;
            }       
            case "..":{
                res="i";
                return res;
            }       
            case ".---":{
                res="j";
                return res;
            }       
            case "-.-":{
                res="k";
                return res;
            }       
            case ".-..":{
                res="l";
                return res;
            }       
            case "--":{
                res="m";
                return res;
            }       
            case "-.":{
                res="n";
                return res;
            }       
            case "---":{
                res="o";
                return res;
            }       
            case ".--.":{
                res="p";
                return res;
            }       
            case "--.-":{
                res="q";
                return res;
            }       
            case ".-.":{
                res="r";
                return res;
            }       
            case "...":{
                res="s";
                return res;
            }       
            case "-":{
                res="t";
                return res;
            }       
            case "..-":{
                res="u";
                return res;
            }       
            case "...-":{
                res="v";
                return res;
            }       
            case ".--":{
                res="w";
                return res;
            }       
            case "-..-":{
                res="x";
                return res;
            }       
            case "-.--":{
                res="y";
                return res;
            }       
            case "--..":{
                res="z";
                return res;
            }       
            case ".----":{
                res="1";
                return res;
            }       
            case "..---":{
                res="2";
                return res;
            }       
            case "...--":{
                res="3";
                return res;
            }       
            case "....-":{
                res="4";
                return res;
            }       
            case ".....":{
                res="5";
                return res;
            }       
            case "-....":{
                res="6";
                return res;
            }       
            case "--...":{
                res="7";
                return res;
            }       
            case "---..":{
                res="8";
                return res;
            }       
            case "----.":{
                res="9";
                return res;
            }       
            case "-----":{
                res="0";
                return res;
            }       
    }
        return res;
        
    }
    private String getFrequency(String r){
        String freq="";
        switch(r){
            case "shell":{
                freq="3.505 MHz";
                return freq;
            }
            case "halls":{
                freq="3.515 MHz";
                return freq;
            }
            case "slick":{
                freq="3.522 MHz";
                return freq;
            }
            case "trick":{
                freq="3.532 MHz";
                return freq;
            }
            case "boxes":{
                freq="3.535 MHz";
                return freq;
            }
            case "leaks":{
                freq="3.542 MHz";
                return freq;
            }
            case "strobe":{
                freq="3.545 MHz";
                return freq;
            }
            case "bistro":{
                freq="3.552 MHz";
                return freq;
            }
            case "flick":{
                freq="3.555 MHz";
                return freq;
            }
            case "bombs":{
                freq="3.565 MHz";
                return freq;
            }
            case "break":{
                freq="3.572 MHz";
                return freq;
            }
            case "brick":{
                freq="3.575 MHz";
                return freq;
            }
            case "steak":{
                freq="3.582 MHz";
                return freq;
            }
            case "sting":{
                freq="3.592 MHz";
                return freq;
            }
            case "vector":{
                freq="3.595 MHz";
                return freq;
            }
            case "beats":{
                freq="3.600 MHz";
                return freq;
            }
        }
        return freq;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MorseCode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MorseCode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MorseCode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MorseCode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MorseCode().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAccept;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lResult;
    private javax.swing.JTextField tfCode;
    // End of variables declaration//GEN-END:variables
}
