/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ktanesolver.ModdedRegular;

/**
 *
 * @author Komp
 */
public class Plumbing extends javax.swing.JFrame {
    class Pipe{
        String colour;
        boolean active=false;
        int forr=0;
        int against=0;
        Pipe(String n){
            colour=n;
        }
    }
    int portTypes=0;
    String activeInput="", activeOutput="";
    boolean containsTwo=false;
    int letters=0, numbers=0;
    Pipe redinp, blueinp, yellowinp, greeninp;
    Pipe redout, blueout, yellowout, greenout;
    char[] serial;
    int inputCount;
    int portParallel, portSerial, portRJ45, portPS2, portStereo, portDVI, portSum;
    int batSum;
    public Plumbing(char[] s, int pp, int ps, int rj, int ps2, int pstereo, int pdvi, int psum, int bsum, int ptypes) {
        serial=s;
        for(int i=0;i<serial.length;i++){
            if(Character.isDigit(serial[i])){
                numbers++;
                if(serial[i]=='2')
                    containsTwo=true;
            }
            if(Character.isLetter(serial[i]))
                letters++;
        }
        portTypes=ptypes;
        portParallel=pp;
        portSerial=ps;
        portRJ45=rj;
        portPS2=ps2;
        portStereo=pstereo;
        portDVI=pdvi;
        portSum=psum;
        batSum=bsum;
        initComponents();
        redinp=new Pipe("Red");
        blueinp=new Pipe("Blue");
        yellowinp=new Pipe("Yellow");
        greeninp=new Pipe("Green");
        redout=new Pipe("Red");
        blueout=new Pipe("Blue");
        greenout=new Pipe("Green");
        yellowout=new Pipe("Yellow");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lInput = new javax.swing.JLabel();
        lOutput = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Active input:");

        jLabel2.setText("Active output:");

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lInput))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lOutput))
                    .addComponent(jButton1))
                .addContainerGap(196, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lInput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lOutput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        for(int i=0;i<serial.length;i++){
            if(serial[i]=='1'){
                redinp.forr++;
                break;
            }
        }
        if(portRJ45==1)
            redinp.forr++;
        if(portDVI>1||portPS2>1||portParallel>1||portRJ45>1||portSerial>1||portStereo>1)
            redinp.against++;
        if((serial[0]==serial[1]||serial[0]==serial[2]||serial[0]==serial[3]||serial[0]==serial[4]||serial[0]==serial[5])
                &&(serial[1]==serial[0]||serial[1]==serial[2]||serial[1]==serial[3]||serial[1]==serial[4]||serial[1]==serial[5])
                &&(serial[2]==serial[1]||serial[2]==serial[0]||serial[2]==serial[3]||serial[2]==serial[4]||serial[2]==serial[5])
                &&(serial[3]==serial[1]||serial[3]==serial[2]||serial[3]==serial[0]||serial[3]==serial[4]||serial[3]==serial[5])
                &&(serial[4]==serial[1]||serial[4]==serial[2]||serial[4]==serial[3]||serial[4]==serial[0]||serial[4]==serial[5])
                &&(serial[5]==serial[1]||serial[5]==serial[2]||serial[5]==serial[3]||serial[5]==serial[4]||serial[5]==serial[0]))
            redinp.against++;
        if(redinp.forr>redinp.against)
            redinp.active=true;
        for(int i=0;i<serial.length;i++){
            if(serial[i]=='2'){
                yellowinp.forr++;
                break;
            }           
        }
        if(portStereo>0)
            yellowinp.forr++;
        if(portRJ45<2&&portParallel<2&&portDVI<2&&portPS2<2&&portSerial<2&&portStereo<2)
            yellowinp.against++;
        for(int i=0;i<serial.length;i++){
            if(serial[i]=='1'||serial[i]=='L'){
                yellowinp.against++;
                break;
            }
        }
        if(yellowinp.forr>yellowinp.against)
            yellowinp.active=true;
        if(numbers>2)
            greeninp.forr++;
        if(portDVI>0)
            greeninp.forr++;
        if(!redinp.active)
            greeninp.against++;
        if(!yellowinp.active)
            greeninp.against++;
        if(greeninp.forr>greeninp.against)
            greeninp.active=true;
        if(!redinp.active&&!yellowinp.active&&!greeninp.active)
            blueinp.active=true;
        else{
            if(portTypes>3)
                blueinp.forr++;
            if(batSum>3)
                blueinp.forr++;
            if(portSum==0)
                blueinp.against++;
            if(batSum==0)
                blueinp.against++;
            if(blueinp.forr>blueinp.against)
            blueinp.active=true;
        }
        inputCount=0;
        if(redinp.active)
            inputCount++;
        if(yellowinp.active)
            inputCount++;
        if(greeninp.active)
            inputCount++;
        if(blueinp.active)
            inputCount++;
        if(portSerial>0)
            redout.forr++;
        if(batSum==1)
            redout.forr++;
        if(numbers>2)
            redout.against++;
        if(inputCount>2)
            redout.against++;
        if(redout.forr>redout.against)
            redout.active=true;
        if(portDVI>1||portPS2>1||portParallel>1||portRJ45>1||portSerial>1||portStereo>1)
            yellowout.forr++;
        for(int i=0;i<serial.length;i++){
            if(serial[i]=='4'||serial[i]=='8'){
                yellowout.forr++;
                break;
            }
        }
        if(!containsTwo)
            yellowout.against++;
        if(greeninp.active)
            yellowout.against++;
        if(yellowout.forr>yellowout.against)
            yellowout.active=true;
        if(inputCount==3)
            greenout.forr++;
        if(portSum==3)
            greenout.forr++;
        if(portSum<3)
            greenout.against++;
        if(numbers>3)
            greenout.against++;
        if(greenout.forr>greenout.against)
            greenout.active=true;
        if(!redout.active&&!yellowout.active&&!greenout.active)
            blueout.active=true;
        else{
            if(inputCount==4)
                blueout.forr++;
            if(!redout.active||!yellowout.active||!greenout.active)
                blueout.forr++;
            if(batSum<2)
                blueout.against++;
            if(portParallel==0)
                blueout.against++;
            if(blueout.forr>blueout.against)
            blueout.active=true;
        }
        if(redinp.active)
            activeInput=activeInput+" "+redinp.colour;
        if(blueinp.active)
            activeInput=activeInput+" "+blueinp.colour;
        if(yellowinp.active)
            activeInput=activeInput+" "+yellowinp.colour;
        if(greeninp.active)
            activeInput=activeInput+" "+greeninp.colour;
        if(redout.active)
            activeOutput=activeOutput+" "+redout.colour;
        if(blueout.active)
            activeOutput=activeOutput+" "+blueout.colour;
        if(greenout.active)
            activeOutput=activeOutput+" "+greenout.colour;
        if(yellowout.active)
            activeOutput=activeOutput+" "+yellowout.colour;
        lInput.setText(activeInput);
        lOutput.setText(activeOutput);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Plumbing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Plumbing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Plumbing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Plumbing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new Plumbing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lInput;
    private javax.swing.JLabel lOutput;
    // End of variables declaration//GEN-END:variables
}
