/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ktanesolver.ModdedRegular;

/**
 *
 * @author Komp
 */
public class BooleanVennDiagram extends javax.swing.JFrame {
    
    String parant="",whole="",result="";
    public BooleanVennDiagram() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cbParant = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cbWhole = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        bAccept = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        lResult = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("(A");

        cbParant.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "∧", "∨", "⊻", "→", "|", "↓", "↔", "←" }));

        jLabel2.setText("B)");

        cbWhole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "∧", "∨", "⊻", "→", "|", "↓", "↔", "←" }));

        jLabel3.setText("C");

        bAccept.setText("OK");
        bAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAcceptActionPerformed(evt);
            }
        });

        jLabel4.setText("Result:");

        jLabel5.setText("A is on top");

        jLabel6.setText("B is bottom left");

        jLabel7.setText("C is bottom right");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbParant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbWhole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bAccept))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lResult))
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbParant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cbWhole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(bAccept))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lResult))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAcceptActionPerformed
        parant=cbParant.getSelectedItem().toString();
        whole=cbWhole.getSelectedItem().toString();
        switch(whole){
            case "∧":{
                switch(parant){
                    case "∧":{
                        result="ABC";
                        break;
                    }
                    case "∨":{
                        result="AC BC ABC";
                        break;
                    }
                    case "⊻":{
                        result="AC BC";
                        break;
                    }
                    case "→":{
                        result="ABC BC C";
                        break;
                    }
                    case "|":{
                        result="AC BC C";
                        break;
                    }
                    case "↓":{
                        result="C";
                        break;
                    }
                    case "↔":{
                        result="ABC C";
                        break;
                    }
                    case "←":{
                        result="ABC AC C";
                        break;
                    }
                }
                break;
            }
            case "∨":{
                switch(parant){
                    case "∧":{
                        result="ABC AB AC BC C";
                        break;
                    }
                    case "∨":{
                        result="A B C AB AC BC ABC";
                        break;
                    }
                    case "⊻":{
                        result="A B C AC BC ABC";
                        break;
                    }
                    case "→":{
                        result="NONE(Circle) B C AB AC BC ABC";
                        break;
                    }
                    case "|":{
                        result="NONE(Circle) A B C AC BC ABC";
                        break;
                    }
                    case "↓":{
                        result="NONE(Circle) ABC AC BC C";
                        break;
                    }
                    case "↔":{
                        result="NONE(Circle) C AB AC BC ABC";
                        break;
                    }
                    case "←":{
                        result="NONE(Circle) A C AB AC BC ABC";
                        break;
                    }
                }
                break;
            }
            case "⊻":{
                switch(parant){
                    case "∧":{
                        result="AB AC BC C";
                        break;
                    }
                    case "∨":{
                        result="A B C AB";
                        break;
                    }
                    case "⊻":{
                        result="A B C ABC";
                        break;
                    }
                    case "→":{
                        result="NONE(Circle) B AB AC ";
                        break;
                    }
                    case "|":{
                        result="NONE(Circle) A B ABC";
                        break;
                    }
                    case "↓":{
                        result="NONE(Circle) AC BC ABC";
                        break;
                    }
                    case "↔":{
                        result="NONE(Circle) AB AC BC";
                        break;
                    }
                    case "←":{
                        result="NONE(Circle) A AB AC";
                        break;
                    }
                }
                break;
            }
            case "→":{
                switch(parant){
                    case "∧":{
                        result="NONE(Circle) A B C AC BC ABC";
                        break;
                    }
                    case "∨":{
                        result="NONE(Circle) C AC BC ABC";
                        break;
                    }
                    case "⊻":{
                        result="NONE(Circle) AB AC BC ABC";
                        break;
                    }
                    case "→":{
                        result="A C AC BC ABC";
                        break;
                    }
                    case "|":{
                        result="C AB AC BC ABC";
                        break;
                    }
                    case "↓":{
                        result="A B C AB AC BC ABC";
                        break;
                    }
                    case "↔":{
                        result="A B C AC BC ABC";
                        break;
                    }
                    case "←":{
                        result="B C AC BC ABC";
                        break;
                    }
                }
                break;
            }
            case "|":{
                switch(parant){
                    case "∧":{
                        result="NONE(Circle) A B C AB AC BC";
                        break;
                    }
                    case "∨":{
                        result="NONE(Circle) A B C AB";
                        break;
                    }
                    case "⊻":{
                        result="NONE(Circle) A B C AB ABC";
                        break;
                    }
                    case "→":{
                        result="NONE(Circle) A B AB AC";
                        break;
                    }
                    case "|":{
                        result="NONE(Circle) A B AB ABC";
                        break;
                    }
                    case "↓":{
                        result="NONE(Circle) A B AB AC BC ABC";
                        break;
                    }
                    case "↔":{
                        result="NONE(Circle) A B AB AC BC";
                        break;
                    }
                    case "←":{
                        result="NONE(Circle) A B AB BC";
                        break;
                    }
                }
                break;
            }
            case "↓":{
                switch(parant){
                    case "∧":{
                        result="NONE(Circle) A B";
                        break;
                    }
                    case "∨":{
                        result="NONE(Circle)";
                        break;
                    }
                    case "⊻":{
                        result="NONE(Circle) AB";
                        break;
                    }
                    case "→":{
                        result="A";
                        break;
                    }
                    case "|":{
                        result="AB";
                        break;
                    }
                    case "↓":{
                        result="A B AB";
                        break;
                    }
                    case "↔":{
                        result="A B";
                        break;
                    }
                    case "←":{
                        result="B";
                        break;
                    }
                }
                break;
            }
            case "↔":{
                switch(parant){
                    case "∧":{
                        result="NONE(Circle) A B ABC";
                        break;
                    }
                    case "∨":{
                        result="NONE(Circle) AC BC ABC";
                        break;
                    }
                    case "⊻":{
                        result="NONE(Circle) AB AC BC";
                        break;
                    }
                    case "→":{
                        result="A C BC ABC";
                        break;
                    }
                    case "|":{
                        result="C AB AC BC";
                        break;
                    }
                    case "↓":{
                        result="A B C AB";
                        break;
                    }
                    case "↔":{
                        result="A B C ABC";
                        break;
                    }
                    case "←":{
                        result="B C AC ABC";
                        break;
                    }
                }
                break;
            }
            case "←":{
                switch(parant){
                    case "∧":{
                        result="NONE(Circle) A B AB ABC";
                        break;
                    }
                    case "∨":{
                        result="NONE(Circle) A B AB AC BC ABC";
                        break;
                    }
                    case "⊻":{
                        result="NONE(Circle) A B AB AC BC";
                        break;
                    }
                    case "→":{
                        result="NONE(Circle) A B C AB BC ABC";
                        break;
                    }
                    case "|":{
                        result="NONE(Circle) A B C AB AC BC";
                        break;
                    }
                    case "↓":{
                        result="NONE(Circle) A B C AB";
                        break;
                    }
                    case "↔":{
                        result="NONE(Circle) A B C AB ABC";
                        break;
                    }
                    case "←":{
                        result="NONE(Circle) A B C AB AC ABC";
                        break;
                    }
                }
                break;
            }
        }
        lResult.setText(result);
    }//GEN-LAST:event_bAcceptActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BooleanVennDiagram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BooleanVennDiagram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BooleanVennDiagram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BooleanVennDiagram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BooleanVennDiagram().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAccept;
    private javax.swing.JComboBox<String> cbParant;
    private javax.swing.JComboBox<String> cbWhole;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel lResult;
    // End of variables declaration//GEN-END:variables
}
